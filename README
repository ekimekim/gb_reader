gb_reader is a project that attempts to make the Gameboy an e-reader.
As part of the build process, you provide a text document.
The built rom will allow reading that text document.

Features
	Most of the screen should be text lines.
	Words should be wrapped correctly.
	The bottom row should be blank with a page or line number indicator on the right.
		For technical reasons this should probably be a character offset.
	The page or line we're up to should be saved to SRAM.
	Do we want a concept of a "page break" for chapters?

Controls
	up/down: scroll lines
	left/right: flip pages
	menu for goto line? difficult due to issues counting lines.
		goto byte offset instead.

== Technical notes ==

Some form of compression for the text is probably a good idea
	Actually after running the numbers, easier not to and everything still fits.
	255 banks = 4080KiB ~= 500k words ~= a large novel

Keeping track of page or line count may be tricky given line definition is dynamic
	based on word wrapping. Maybe just use dead reckoning, when saving save both
	byte offset and line count, and hope we don't get out of sync?
	Or just forget counting lines and always use byte offset.

Fixed-width fonts are just too wide. You can only fit a handful of words per line.
Instead we use a variable-width font. This font is heavily pre-processed to save cycles.
We keep 8 versions of a 2-tile wide version of each char. Each version starts at a different
bit offset. When rendering, we track the current bit offset we're up to within the current tile,
and OR the next char into that byte's data, then using any carryover as the start of the next tile.

We should render lines into a staging area for copy over to vram during vblank.
We can save some time here by only using 2 colors, 00 and 11. Under the gameboy pixel format this
lets us copy source data of 0 or 1 to vram by copying every byte twice:
	pop DE
	ld A, D
	ld [HL+], A
	ld [HL+], A
	ld A, E
	ld [HL+], A
	ld [HL+], A
which gives us 6.5 cycles/byte read, and 3.25 cycles/byte written.
With double-speed CPU we have 2280 cyc/vblank, ~700 bytes = ~43 tiles = ~2 rows
Assuming this is our bottleneck it will take 9 frames (150ms) to draw a screen.
We can do better with DMA, will need to work out what's faster compared to rendering
directly into a 16-byte format.

This will require use of a "fully memory mapped" screen configuration, where every tile texture maps to
a unique tile on screen. This is doable by using the background + the window to use both the signed
and unsigned tilemap areas. With 24 tiles left over, we can even have a pre-rendered next line.
Another interesting option is the CGB's second tile bank. This may allow us to set up a double-buffering
type scheme where we render the next page in the background and on flip, all we need to do is DMA
over the flag flipping to the other tile bank, which is doable in a single vblank.

Word wrapping is pre-baked at build time. Storage format is some number of chars, then \0.
Each bank's data must end with padding of \xFF to indicate next bank. Banks must end at the
end of a line.

To reduce special casing, we handle book start/end with padding.
Data must always start with a blank line, and end with 32 blank lines.
We do validation before user actions that the user doesn't scroll before start or after end.
